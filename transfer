void alignWithFrontWall() {
  const float distanceThreshold = 0.1; // Allowable difference for alignment (in cm)
  const float adjustment = 0.01;       // Adjustment increment for motor speed
  const float baseSpeed = 0.3;         // Base motor speed

  motorSpeedA = baseSpeed;  // Initialize motor speeds
  motorSpeedB = baseSpeed;

  while (true) {
    // Read distances from the two front sensors
    float distance1 = getFrontLeftSensor();   // Replace with actual sensor reading function
    float distance2 = getFrontRightSensor();  // Replace with actual sensor reading function

    // Debugging output
    Serial.print("Front Left Sensor (Distance1): ");
    Serial.println(distance1);
    Serial.print("Front Right Sensor (Distance2): ");
    Serial.println(distance2);

    // Calculate the difference between the two front sensor readings
    float distanceDifference = distance1 - distance2;

    if (abs(distanceDifference) <= distanceThreshold) {
      // If the difference is within the threshold, alignment is complete
      motorSpeedA = baseSpeed;
      motorSpeedB = baseSpeed;

      // Stop the motors and exit the alignment loop
      stopMotors();
      Serial.println("Front wall alignment complete.");
      break;
    } else if (distanceDifference > distanceThreshold) {
      // Left side is farther; adjust left motor
      motorSpeedA = baseSpeed;  // Keep right motor at base speed
      motorSpeedB = min(motorSpeedB + adjustment, 1.0); // Increase left motor speed
    } else if (distanceDifference < -distanceThreshold) {
      // Right side is farther; adjust right motor
      motorSpeedA = min(motorSpeedA + adjustment, 1.0); // Increase right motor speed
      motorSpeedB = baseSpeed;  // Keep left motor at base speed
    }

    // Debugging output for motor speeds
    Serial.print("Motor Speed A: ");
    Serial.println(motorSpeedA);
    Serial.print("Motor Speed B: ");
    Serial.println(motorSpeedB);

    // Write motor speeds to the motors
    motorA_pwm.write(motorSpeedA);
    motorB_pwm.write(motorSpeedB);

    // Allow time for adjustments
    delay(50);
  }
}
